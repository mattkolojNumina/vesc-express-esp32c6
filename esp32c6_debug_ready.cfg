# ESP32-C6 OpenOCD Configuration - Production Ready
# Optimized for ESP32-C6 RISC-V debugging with proper architecture support

# Interface: ESP32 USB Bridge
source [find interface/esp_usb_bridge.cfg]

# Set conservative speed for stability
adapter speed 1000

# Transport: JTAG for ESP32-C6
transport select jtag

# ESP32-C6 RISC-V target configuration
set _CHIPNAME riscv
set _TARGETNAME $_CHIPNAME.cpu

# Create the JTAG tap
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x0000c25

# Create RISC-V target
target create $_TARGETNAME riscv -chain-position $_CHIPNAME.cpu

# Configure work area for debugging
$_TARGETNAME configure -work-area-phys 0x40800000 -work-area-size 0x2000 -work-area-backup 1

# Reset configuration (none for ESP32-C6 USB-JTAG)
reset_config none

# Configure debugging ports
gdb_port 3333
telnet_port 4444
tcl_port 6666

# RISC-V specific debugging options
# Enable abstract command support for better performance
riscv set_prefer_sba off
riscv set_command_timeout_sec 10

# Event handlers for debugging
$_TARGETNAME configure -event gdb-attach {
    echo "GDB attached to ESP32-C6 RISC-V target"
    halt
}

$_TARGETNAME configure -event reset-assert-pre {
    echo "ESP32-C6 reset sequence initiated"
}

# Optional: Flash programming support
# flash bank $_FLASHNAME esp32c6 0x0 0 0 0 $_TARGETNAME

# Debugging helpers
proc esp32c6_reset {} {
    echo "Performing ESP32-C6 reset"
    reset halt
}

proc esp32c6_status {} {
    echo "ESP32-C6 Target Status:"
    targets
    reg
}

echo "ESP32-C6 OpenOCD configuration loaded successfully"
echo "Use 'esp32c6_reset' and 'esp32c6_status' for debugging helpers"